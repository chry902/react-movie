{"version":3,"file":"static/js/228.0cd241ee.chunk.js","mappings":"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","sources":["webpack://card-movie-react/./src/Pages/EditMovie/styles.module.scss?834f","Pages/EditMovie/editmovie.jsx","Utils/Http.jsx","webpack://card-movie-react/./src/components/CardItem/stayles.module.scss?1900","components/CardItem/carditem.jsx","webpack://card-movie-react/./src/components/CreateCardForm/styles.module.scss?5186","components/CreateCardForm/form.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"EditMovie\":\"styles_EditMovie__4U8qJ\",\"card_edit_container\":\"styles_card_edit_container__zovkp\",\"form_edit_container\":\"styles_form_edit_container__lIVSh\",\"cardItem\":\"styles_cardItem__zqNyw\"};","import styles from \"./styles.module.scss\"\n\nimport { useState, useEffect } from \"react\";\nimport { GET } from \"../../Utils/Http\";\nimport { useNavigate, useLocation } from \"react-router-dom\"\n\nimport CardItem from \"../../components/CardItem/carditem\";\nimport { CreateCardForm } from \"../../components/CreateCardForm/form\";\n\nfunction EditMomvie({ setIsModalVisible, editSuccess }) {\n    const location = useLocation();\n\n    const [movieData, setMovieData] = useState({});\n    const movieId = location.pathname.split(\"/\").reverse()[0];\n\n    const [editIsVisible, setEditIsVisible] = useState(\"\")\n    const navigate = useNavigate();\n    console.log(\"edit\", setEditIsVisible);\n\n    useEffect(() => {\n        addSuccess(editIsVisible);\n        if (editIsVisible.visible === true) {\n            navigate(\"/\");\n        };\n        // eslint-disable-next-line\n    }, [editIsVisible]);\n\n    function addSuccess(value) {\n        editSuccess(value);\n        console.log(\"valore da funzione edit\", value);\n    }\n\n\n    useEffect(() => {\n        GET(movieId).then((data) => setMovieData(data));\n\n    }, [movieId]);\n\n    return (\n        <>\n            <div className={styles.EditMovie}>\n                <div className={styles.card_edit_container}>\n                    <CardItem className={styles.card_item} cardData={movieData} />\n                </div>\n                <div className={styles.form_edit_container}>\n                    <CreateCardForm className={styles.card_form} setIsModalVisible={setIsModalVisible} setEditIsVisible={setEditIsVisible} callType=\"PUT\" />\n                </div>\n            </div>\n        </>\n    )\n}\nexport default EditMomvie","const BASE_URL = \"https://edgemony-backend.herokuapp.com/movies\";\n\n// GET\n// const GET = () => fetch(BASE_URL).then((res) => res.json());\n\n// GET\nconst GET = (id = \"\") => fetch(`${BASE_URL}/${id}`).then((res) => res.json());\n\n// POST\nconst POST = (body) =>\n    fetch(BASE_URL, {\n        method: \"POST\",\n        headers: {\n            \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n    });\n\n// DELETE\nconst DELETE = (id) => fetch(`${BASE_URL}/${id}`, { method: \"DELETE\" });\n\n// PUT\nconst PUT = (id, body) =>\n    fetch(`${BASE_URL}/${id}`, {\n        method: \"PUT\",\n        headers: {\n            \"Content-type\": \"application/json\",\n        },\n        body: JSON.stringify(body),\n    });\n\nexport { GET, POST, DELETE, PUT };","// extracted by mini-css-extract-plugin\nexport default {\"CardItem\":\"stayles_CardItem__cILrD\",\"buttonContainer\":\"stayles_buttonContainer__AtDwc\",\"imgContainerCard\":\"stayles_imgContainerCard__nI9au\",\"yearsContainerCard\":\"stayles_yearsContainerCard__8JpkV\",\"descrCard\":\"stayles_descrCard__Lt7dC\"};","\nimport { Link } from \"react-router-dom\";\nimport { DELETE, GET } from \"../../Utils/Http\";\n\n\n\nimport styles from \"./stayles.module.scss\";\n\n\nfunction CardItem({ cardData, setMoviesData }) {\n\n\n    const hadleDeleted = (id) => {\n        DELETE(id).then(() => GET().then((data) => setMoviesData(data)))\n        // setRender(true);\n        console.log(\"deleted\");\n    }\n\n\n\n\n\n\n    return (\n        <div className={styles.CardItem}>\n            <div className={styles.titleCardContain}>\n                <div className={styles.buttonContainer}>\n                    <button onClick={() => hadleDeleted(cardData.id)}>deleted</button>\n                </div>\n                <Link to={`/edit-movie/${cardData.id}`}>\n                    <h2>{cardData.title}</h2>\n                </Link>\n            </div>\n\n            <p className={styles.yearsContainerCard}>{cardData.year}</p>\n\n            <div className={styles.imgContainerCard}>\n                <img src={cardData.poster} alt={cardData.title} />\n            </div>\n\n            <p className={styles.descrCard}>{cardData.description}</p>\n\n            <div className={styles.genre}>\n                <ul>\n                    {cardData && Array.isArray(cardData.genres) ? (\n                        cardData.genres.map((genre, index) => <li key={index}>{genre}</li>)\n                    ) : (\n                        <li>{cardData.genres}</li>\n                    )}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\nexport default CardItem;","// extracted by mini-css-extract-plugin\nexport default {\"CreateCardForm\":\"styles_CreateCardForm__j0Ueu\"};","import { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n// import { AddMovie } from \"../../Pages/AddMovie/AddMovie\";\nimport { POST, PUT } from \"../../Utils/Http\";\n\n\nimport styles from \"./styles.module.scss\";\n\nexport function CreateCardForm({ setEditIsVisible, setIsModalVisible, callType }) {\n\n\n\n    const [title, setTitle] = useState(\"\");\n    const [year, setYear] = useState(\"\");\n    const [poster, setPoster] = useState(\"\");\n    const [genres, setGenres] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n\n    const unStringifyGenres = (genres) => genres.split(\",\");\n    // const navigate = useNavigate();\n    const location = useLocation();\n    const movieId = location.pathname.split(\"/\").reverse()[0];\n\n    const addNewMovie = (e) => {\n        e.preventDefault();\n\n        if (callType === \"POST\") {\n            POST({\n                title,\n                year,\n                poster,\n                genres: unStringifyGenres(genres),\n                description,\n            });\n            setIsModalVisible({\n                visible: true,\n                content: \"il post è stato publicato!\",\n\n            });\n\n\n\n        } else {\n            PUT(movieId, {\n                title,\n                year,\n                poster,\n                genres: unStringifyGenres(genres),\n                description,\n            });\n            setEditIsVisible({\n                visible: true,\n                content: \"Modifica avvenuta con successo!\",\n\n            });\n\n        }\n\n    };\n\n\n\n    return (\n        <div className={styles.CreateCardForm}>\n\n\n            <form onSubmit={addNewMovie} className={styles.form}>\n                <label htmlFor=\"title\">Title:</label>\n                <input\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                    type=\"text\"\n                    id=\"title\"\n                    name=\"title\"\n                    required\n                />\n\n                <label htmlFor=\"year\">Year:</label>\n                <input\n                    value={year}\n                    onChange={(e) => setYear(e.target.value)}\n                    type=\"text\"\n                    id=\"year\"\n                    name=\"year\"\n                    required\n                />\n\n                <label htmlFor=\"poster\">Poster:</label>\n                <input\n                    value={poster}\n                    onChange={(e) => setPoster(e.target.value)}\n                    type=\"text\"\n                    id=\"poster\"\n                    name=\"poster\"\n                    required\n                />\n\n                <label htmlFor=\"genres\">Genres:</label>\n                <input\n                    value={genres}\n                    onChange={(e) => setGenres(e.target.value)}\n                    type=\"text\"\n                    id=\"genres\"\n                    name=\"genres\"\n                    required\n                />\n\n                <label htmlFor=\"description\">Description:</label>\n                <input\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    type=\"text\"\n                    id=\"description\"\n                    name=\"description\"\n                    required\n                />\n\n                <input type=\"submit\" value=\"Send it!\" />\n            </form>\n        </div>\n    );\n}\n\n"],"names":["setIsModalVisible","editSuccess","location","useLocation","useState","movieData","setMovieData","movieId","pathname","split","reverse","editIsVisible","setEditIsVisible","navigate","useNavigate","console","log","useEffect","value","visible","GET","then","data","className","styles","cardData","callType","BASE_URL","id","fetch","res","json","POST","body","method","headers","JSON","stringify","DELETE","PUT","setMoviesData","onClick","to","title","year","src","poster","alt","description","Array","isArray","genres","map","genre","index","CreateCardForm","setTitle","setYear","setPoster","setGenres","setDescription","unStringifyGenres","onSubmit","e","preventDefault","content","htmlFor","onChange","target","type","name","required"],"sourceRoot":""}